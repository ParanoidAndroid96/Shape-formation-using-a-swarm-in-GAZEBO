class BOT{
	public:
		BOT *bots;
		ros::Publisher publisher;
		ros::Subscriber sub;
		//ros::Subscriber sub_sig;
		ros::NodeHandle n; 
		int id;
		int num_bots;
		float bot_pub_lin_x;
		float bot_pub_lin_y;
		float bot_pub_lin_z;
		float bot_pub_ang_x;
		float bot_pub_ang_y;
		float bot_pub_ang_z;
		std::vector<float> dist;
		std::vector<float> angle;
		std::vector<int> visible_bots;
		float radii;
		float vel_x;
		float vel_y;
		float target_vel_x;
		float target_vel_y;
		float pref_vel_x;
		float pref_vel_y;
		float pref_vel;
		float *lines_x;
		float *lines_y;
		float *lines_angles;
		int num_lines;
		int state;
		float target_pose_x;
		float target_pose_y;
		float reciever_x;
		float reciever_y;
		float sender_x;
		float sender_y;
		float bound_1_x;
		float bound_1_y;
		float bound_2_x;
		float bound_2_y;
		float bound_3_x;
		float bound_3_y;
		float stop_ang;
		float exit_x;
		float exit_y;
	//public:
		
		nav_msgs::Odometry bot;
		geometry_msgs::Vector3 target_angle;
		geometry_msgs::Vector3 angles;
		geometry_msgs::Quaternion ori;
		float bot_pos_x;
		float bot_pos_y;
		float bot_pos_z;
		float bot_lin_x;
		float bot_lin_y;
		float bot_lin_z;
		float bot_ang_x;
		float bot_ang_y;
		float bot_ang_z;
		int rotating;
		int moving;
		int shape_num;
		std::vector<int> covered_shapes;
		struct tri
		{
			int shape_id;
			float stop_ang;
			float ref_vertex_x;
			float ref_vertex_y;
			float target_vertex_x;
			float target_vertex_y;
			float vertex_1_x;
			float vertex_1_y;
			float vertex_2_x;
			float vertex_2_y;
			float vertex_3_x;
			float vertex_3_y;
			std::vector<struct tri> neighbor_tri;
		};
		std::vector<struct tri> triangles;
		//std::vector<struct tri> neighbor_tri;
		int closest_tri;


		BOT(int index,int num, const std::string& pub_topic, const std::string& sub_topic);
		void display();
		void pos_reader(const nav_msgs::Odometry::ConstPtr& msg);
		void sig_reader(const geometry_msgs::PoseStamped::ConstPtr& msg);
		void rotate( float deg );
		void pub();
		geometry_msgs::Vector3 toEuler(geometry_msgs::Quaternion msg);
		void motion_1D( geometry_msgs::PoseStamped target_pose);
		void rand_motion();
		float getDist(float source_x, float source_y, float neighbor_x, float neighbor_y);
		float getAngle(float source_x, float source_y, float neighbor_x, float neighbor_y);
		void update_bot_info();
		float obstacle();
		float HRVO_2(int i);
		float HRVO_stationary();
		float clear_path();
		void edge_follow();
		int shape_checker(float x, float y);
		int shape_checker_2(float x, float y);
		int shape_checker_3(float x, float y);
		int shape_checker_4(float x, float y);
		void closest_median();
		float area(float x1, float y1, float x2, float y2, float x3, float y3);
		float sign(float x1, float y1, float x2, float y2, float x3, float y3);
		void init_shape();
		void exit_vertex(float x, float y, int shape_id);
};

